{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/SortType.ts","components/TodoModal/TodoModal.tsx","utils/prepareTodos.ts","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","text","status","initialState","query","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","selectedTodo","dispatch","className","map","isSelectedTodo","id","cn","completed","title","onClick","todoActions","TodoFilter","setQuery","filterActions","value","onChange","event","newStatus","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","SortType","TodoModal","testTodo","console","log","useState","user","setUser","fetchedUser","a","userId","data","Error","useEffect","href","email","name","App","hasError","setHasError","isLoading","setIsLoading","fetchedTodos","todosActions","visibleTodo","useMemo","sortType","todosForRender","lowQuery","toLowerCase","includes","ACTIVE","COMPLETED","ALL","prepareTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.69e28f36.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/SET-QUERY';\n  payload: string;\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET-STATUS';\n  payload: Status };\n\nconst setQuery = (text: string): SetQueryAction => ({\n  type: 'filter/SET-QUERY',\n  payload: text,\n});\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET-STATUS',\n  payload: status,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype FilterState = {\n  query: string;\n  status: Status;\n};\n\ntype Action = SetQueryAction | SetStatusAction;\n\nconst initialState: FilterState = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: FilterState = initialState,\n  action: Action,\n): FilterState => {\n  switch (action.type) {\n    case 'filter/SET-QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/SET-STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as todoActions } from '../../features/currentTodo';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n\n        {todos.map(todo => {\n          const isSelectedTodo = todo.id === selectedTodo?.id;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={cn({\n                'has-background-info-light': isSelectedTodo,\n              })}\n              key={todo.id}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className={cn({ 'fas fa-check': todo.completed })} />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded \">\n                <p className={cn(\n                  {\n                    'has-text-success': todo.completed,\n                    'has-text-danger': !todo.completed,\n                  },\n                )}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => dispatch(todoActions.setTodo(todo))}\n                >\n                  <span className=\"icon\">\n                    <i className={cn({\n                      'far fa-eye': !isSelectedTodo,\n                      'far fa-eye-slash': isSelectedTodo,\n                    })}\n                    />\n                    {' '}\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const { query, status } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const setStatus = (newStatus: Status) => {\n    dispatch(filterActions.setStatus(newStatus));\n  };\n\n  const setQuery = (text: string) => dispatch(filterActions.setQuery(text));\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(event) => setStatus(event.target.value as Status)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"clearSearch\"\n              onClick={() => setQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum SortType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React, { useEffect, useState } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as todoActions } from '../../features/currentTodo';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoModal: React.FC<Props> = ({ todo }) => {\n  const dispatch = useAppDispatch();\n  const testTodo = useAppSelector(state => state.currentTodo);\n\n  // eslint-disable-next-line no-console\n  console.log(testTodo);\n\n  const { id, title, completed } = todo;\n\n  const [user, setUser] = useState<User | null>(null);\n  const fetchedUser = async () => {\n    try {\n      const data = await getUser(todo.userId);\n\n      setUser(data);\n    } catch (error) {\n      throw new Error('Sorry, something goes wrong. Please, try again later');\n    }\n  };\n\n  useEffect(() => {\n    fetchedUser();\n  }, [todo.userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {user ? (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(todoActions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n\n              {completed\n                ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                )\n                : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user && (user.name)}\n              </a>\n            </p>\n          </div>\n        </div>\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { SortType } from '../types/SortType';\n\nexport const prepareTodos = (\n  todos: Todo[],\n  query: string,\n  sortType: string,\n):Todo[] => {\n  let todosForRender = [...todos];\n\n  if (query) {\n    const lowQuery = query.toLowerCase();\n\n    todosForRender = todosForRender.filter(\n      todo => todo.title.toLowerCase().includes(lowQuery),\n    );\n  }\n\n  todosForRender = todosForRender.filter(todo => {\n    switch (sortType) {\n      case SortType.ACTIVE:\n        return !todo.completed;\n\n      case SortType.COMPLETED:\n        return todo.completed;\n\n      case SortType.ALL:\n        return true;\n\n      default:\n        throw new Error('Incorrect SortType data');\n    }\n  });\n\n  return todosForRender;\n};\n","/* eslint-disable max-len */\nimport React, {\n  useEffect, useMemo, useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\n// import debounce from 'lodash.debounce';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\nimport { prepareTodos } from './utils/prepareTodos';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const { status, query } = useAppSelector(state => state.filter);\n\n  const [hasError, setHasError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // const [appliedQuery, setAppliedQuery] = useState('');\n\n  const fetchedTodos = async () => {\n    try {\n      const data = await getTodos();\n\n      dispatch(todosActions.setTodos(data));\n      setIsLoading(false);\n    } catch (error) {\n      setHasError(true);\n    }\n  };\n\n  useEffect(() => {\n    fetchedTodos();\n  }, []);\n\n  // const applyQuery = useCallback(debounce(setAppliedQuery, 1000), []);\n\n  // const handleSetQuery = useCallback((event: string) => {\n  //   setQuery(event);\n  //   applyQuery(event);\n  // }, []);\n\n  // const handleClearQuery = useCallback(() => {\n  //   setQuery('');\n  //   setAppliedQuery('');\n  // }, []);\n\n  const visibleTodo = useMemo(() => (\n    prepareTodos(todos, query, status)),\n  [todos, query, status]);\n\n  if (hasError) {\n    return (<span>Sorry, no todos at this moment</span>);\n  }\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? (\n                  <Loader />\n                )\n                : (\n                  <TodoList\n                    todos={visibleTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal todo={selectedTodo} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}